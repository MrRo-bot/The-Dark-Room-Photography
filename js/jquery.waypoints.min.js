!(function () {
  "use strict";

  function a(d) {
    if (!d) throw new Error("No options passed to Waypoint constructor");
    if (!d.element)
      throw new Error("No element option passed to Waypoint constructor");
    if (!d.handler)
      throw new Error("No handler option passed to Waypoint constructor");
    (this.key = "waypoint-" + b),
      (this.options = a.Adapter.extend({}, a.defaults, d)),
      (this.element = this.options.element),
      (this.adapter = new a.Adapter(this.element)),
      (this.callback = d.handler),
      (this.axis = this.options.horizontal ? "horizontal" : "vertical"),
      (this.enabled = this.options.enabled),
      (this.triggerPoint = null),
      (this.group = a.Group.findOrCreate({
        name: this.options.group,
        axis: this.axis,
      })),
      (this.context = a.Context.findOrCreateByElement(this.options.context)),
      a.offsetAliases[this.options.offset] &&
        (this.options.offset = a.offsetAliases[this.options.offset]),
      this.group.add(this),
      this.context.add(this),
      (c[this.key] = this),
      (b += 1);
  }
  var b = 0,
    c = {};
  (a.prototype.queueTrigger = function (a) {
    this.group.queueTrigger(this, a);
  }),
    (a.prototype.trigger = function (a) {
      this.enabled && this.callback && this.callback.apply(this, a);
    }),
    (a.prototype.destroy = function () {
      this.context.remove(this), this.group.remove(this), delete c[this.key];
    }),
    (a.prototype.disable = function () {
      return (this.enabled = !1), this;
    }),
    (a.prototype.enable = function () {
      return this.context.refresh(), (this.enabled = !0), this;
    }),
    (a.prototype.next = function () {
      return this.group.next(this);
    }),
    (a.prototype.previous = function () {
      return this.group.previous(this);
    }),
    (a.invokeAll = function (a) {
      var b = [];
      for (var d in c) b.push(c[d]);
      for (var e = 0, f = b.length; f > e; e++) b[e][a]();
    }),
    (a.destroyAll = function () {
      a.invokeAll("destroy");
    }),
    (a.disableAll = function () {
      a.invokeAll("disable");
    }),
    (a.enableAll = function () {
      a.invokeAll("enable");
    }),
    (a.refreshAll = function () {
      a.Context.refreshAll();
    }),
    (a.viewportHeight = function () {
      return window.innerHeight || document.documentElement.clientHeight;
    }),
    (a.viewportWidth = function () {
      return document.documentElement.clientWidth;
    }),
    (a.adapters = []),
    (a.defaults = {
      context: window,
      continuous: !0,
      enabled: !0,
      group: "default",
      horizontal: !1,
      offset: 0,
    }),
    (a.offsetAliases = {
      "bottom-in-view": function () {
        return this.context.innerHeight() - this.adapter.outerHeight();
      },
      "right-in-view": function () {
        return this.context.innerWidth() - this.adapter.outerWidth();
      },
    }),
    (window.Waypoint = a);
})(),
  (function () {
    "use strict";

    function a(a) {
      window.setTimeout(a, 1e3 / 60);
    }

    function b(a) {
      (this.element = a),
        (this.Adapter = j.Adapter),
        (this.adapter = new this.Adapter(a)),
        (this.key = "waypoint-context-" + c),
        (this.didScroll = !1),
        (this.didResize = !1),
        (this.oldScroll = {
          x: this.adapter.scrollLeft(),
          y: this.adapter.scrollTop(),
        }),
        (this.waypoints = {
          vertical: {},
          horizontal: {},
        }),
        (a.waypointContextKey = this.key),
        (d[a.waypointContextKey] = this),
        (c += 1),
        this.createThrottledScrollHandler(),
        this.createThrottledResizeHandler();
    }
    var c = 0,
      d = {},
      j = window.Waypoint,
      e = window.onload;
    (b.prototype.add = function (a) {
      var b = a.options.horizontal ? "horizontal" : "vertical";
      (this.waypoints[b][a.key] = a), this.refresh();
    }),
      (b.prototype.checkEmpty = function () {
        var a = this.Adapter.isEmptyObject(this.waypoints.horizontal),
          b = this.Adapter.isEmptyObject(this.waypoints.vertical);
        a && b && (this.adapter.off(".waypoints"), delete d[this.key]);
      }),
      (b.prototype.createThrottledResizeHandler = function () {
        function a() {
          b.handleResize(), (b.didResize = !1);
        }
        var b = this;
        this.adapter.on("resize.waypoints", function () {
          b.didResize || ((b.didResize = !0), j.requestAnimationFrame(a));
        });
      }),
      (b.prototype.createThrottledScrollHandler = function () {
        function a() {
          b.handleScroll(), (b.didScroll = !1);
        }
        var b = this;
        this.adapter.on("scroll.waypoints", function () {
          (!b.didScroll || j.isTouch) &&
            ((b.didScroll = !0), j.requestAnimationFrame(a));
        });
      }),
      (b.prototype.handleResize = function () {
        j.Context.refreshAll();
      }),
      (b.prototype.handleScroll = function () {
        var b = {},
          d = {
            horizontal: {
              newScroll: this.adapter.scrollLeft(),
              oldScroll: this.oldScroll.x,
              forward: "right",
              backward: "left",
            },
            vertical: {
              newScroll: this.adapter.scrollTop(),
              oldScroll: this.oldScroll.y,
              forward: "down",
              backward: "up",
            },
          };
        for (var e in d) {
          var f = d[e],
            g = f.newScroll > f.oldScroll,
            i = g ? f.forward : f.backward;
          for (var j in this.waypoints[e]) {
            var k = this.waypoints[e][j],
              a = f.oldScroll < k.triggerPoint,
              l = f.newScroll >= k.triggerPoint;
            ((a && l) || (!a && !l)) &&
              (k.queueTrigger(i), (b[k.group.id] = k.group));
          }
        }
        for (var h in b) b[h].flushTriggers();
        this.oldScroll = {
          x: d.horizontal.newScroll,
          y: d.vertical.newScroll,
        };
      }),
      (b.prototype.innerHeight = function () {
        return this.element == this.element.window
          ? j.viewportHeight()
          : this.adapter.innerHeight();
      }),
      (b.prototype.remove = function (a) {
        delete this.waypoints[a.axis][a.key], this.checkEmpty();
      }),
      (b.prototype.innerWidth = function () {
        return this.element == this.element.window
          ? j.viewportWidth()
          : this.adapter.innerWidth();
      }),
      (b.prototype.destroy = function () {
        var a = [];
        for (var b in this.waypoints)
          for (var c in this.waypoints[b]) a.push(this.waypoints[b][c]);
        for (var d = 0, e = a.length; e > d; d++) a[d].destroy();
      }),
      (b.prototype.refresh = function () {
        var b,
          k = this.element == this.element.window,
          e = k ? void 0 : this.adapter.offset(),
          i = {};
        for (var m in (this.handleScroll(),
        (b = {
          horizontal: {
            contextOffset: k ? 0 : e.left,
            contextScroll: k ? 0 : this.oldScroll.x,
            contextDimension: this.innerWidth(),
            oldScroll: this.oldScroll.x,
            forward: "right",
            backward: "left",
            offsetProp: "left",
          },
          vertical: {
            contextOffset: k ? 0 : e.top,
            contextScroll: k ? 0 : this.oldScroll.y,
            contextDimension: this.innerHeight(),
            oldScroll: this.oldScroll.y,
            forward: "down",
            backward: "up",
            offsetProp: "top",
          },
        }),
        b)) {
          var n = b[m];
          for (var o in this.waypoints[m]) {
            var a,
              q,
              r,
              s,
              v,
              x = this.waypoints[m][o],
              d = x.options.offset,
              z = x.triggerPoint,
              w = 0,
              A = null == z;
            x.element !== x.element.window &&
              (w = x.adapter.offset()[n.offsetProp]),
              "function" == typeof d
                ? (d = d.apply(x))
                : "string" == typeof d &&
                  ((d = parseFloat(d)),
                  -1 < x.options.offset.indexOf("%") &&
                    (d = Math.ceil((n.contextDimension * d) / 100))),
              (a = n.contextScroll - n.contextOffset),
              (x.triggerPoint = w + a - d),
              (q = z < n.oldScroll),
              (r = x.triggerPoint >= n.oldScroll),
              (s = q && r),
              (v = !q && !r),
              !A && s
                ? (x.queueTrigger(n.backward), (i[x.group.id] = x.group))
                : !A && v
                ? (x.queueTrigger(n.forward), (i[x.group.id] = x.group))
                : A &&
                  n.oldScroll >= x.triggerPoint &&
                  (x.queueTrigger(n.forward), (i[x.group.id] = x.group));
          }
        }
        return (
          j.requestAnimationFrame(function () {
            for (var a in i) i[a].flushTriggers();
          }),
          this
        );
      }),
      (b.findOrCreateByElement = function (a) {
        return b.findByElement(a) || new b(a);
      }),
      (b.refreshAll = function () {
        for (var a in d) d[a].refresh();
      }),
      (b.findByElement = function (a) {
        return d[a.waypointContextKey];
      }),
      (window.onload = function () {
        e && e(), b.refreshAll();
      }),
      (j.requestAnimationFrame = function (b) {
        var c =
          window.requestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          a;
        c.call(window, b);
      }),
      (j.Context = b);
  })(),
  (function () {
    "use strict";

    function b(a, b) {
      return a.triggerPoint - b.triggerPoint;
    }

    function c(a, b) {
      return b.triggerPoint - a.triggerPoint;
    }

    function a(a) {
      (this.name = a.name),
        (this.axis = a.axis),
        (this.id = this.name + "-" + this.axis),
        (this.waypoints = []),
        this.clearTriggerQueues(),
        (d[this.axis][this.name] = this);
    }
    var d = {
        vertical: {},
        horizontal: {},
      },
      f = window.Waypoint;
    (a.prototype.add = function (a) {
      this.waypoints.push(a);
    }),
      (a.prototype.clearTriggerQueues = function () {
        this.triggerQueues = {
          up: [],
          down: [],
          left: [],
          right: [],
        };
      }),
      (a.prototype.flushTriggers = function () {
        for (var d in this.triggerQueues) {
          var e = this.triggerQueues[d];
          e.sort("up" == d || "left" === d ? c : b);
          for (var f, g = 0, h = e.length; h > g; g += 1)
            (f = e[g]),
              (f.options.continuous || g === e.length - 1) && f.trigger([d]);
        }
        this.clearTriggerQueues();
      }),
      (a.prototype.next = function (a) {
        this.waypoints.sort(b);
        var c = f.Adapter.inArray(a, this.waypoints),
          d = c === this.waypoints.length - 1;
        return d ? null : this.waypoints[c + 1];
      }),
      (a.prototype.previous = function (a) {
        this.waypoints.sort(b);
        var c = f.Adapter.inArray(a, this.waypoints);
        return c ? this.waypoints[c - 1] : null;
      }),
      (a.prototype.queueTrigger = function (a, b) {
        this.triggerQueues[b].push(a);
      }),
      (a.prototype.remove = function (a) {
        var b = f.Adapter.inArray(a, this.waypoints);
        -1 < b && this.waypoints.splice(b, 1);
      }),
      (a.prototype.first = function () {
        return this.waypoints[0];
      }),
      (a.prototype.last = function () {
        return this.waypoints[this.waypoints.length - 1];
      }),
      (a.findOrCreate = function (b) {
        return d[b.axis][b.name] || new a(b);
      }),
      (f.Group = a);
  })(),
  (function () {
    "use strict";

    function a(a) {
      this.$element = b(a);
    }
    var b = window.jQuery,
      c = window.Waypoint;
    b.each(
      [
        "innerHeight",
        "innerWidth",
        "off",
        "offset",
        "on",
        "outerHeight",
        "outerWidth",
        "scrollLeft",
        "scrollTop",
      ],
      function (b, c) {
        a.prototype[c] = function () {
          var a = Array.prototype.slice.call(arguments);
          return this.$element[c].apply(this.$element, a);
        };
      }
    ),
      b.each(["extend", "inArray", "isEmptyObject"], function (c, d) {
        a[d] = b[d];
      }),
      c.adapters.push({
        name: "jquery",
        Adapter: a,
      }),
      (c.Adapter = a);
  })(),
  (function () {
    "use strict";

    function a(a) {
      return function () {
        var c = [],
          d = arguments[0];
        return (
          a.isFunction(arguments[0]) &&
            ((d = a.extend({}, arguments[1])), (d.handler = arguments[0])),
          this.each(function () {
            var e = a.extend({}, d, {
              element: this,
            });
            "string" == typeof e.context &&
              (e.context = a(this).closest(e.context)[0]),
              c.push(new b(e));
          }),
          c
        );
      };
    }
    var b = window.Waypoint;
    window.jQuery && (window.jQuery.fn.waypoint = a(window.jQuery)),
      window.Zepto && (window.Zepto.fn.waypoint = a(window.Zepto));
  })();
